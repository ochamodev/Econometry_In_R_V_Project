dataset %>%
ggplot(aes(x=Radio, y=Sales)) +
geom_point(col="red")+
theme_minimal()
dataset %>%
ggplot(aes(x=Newspaper, y=Sales)) +
geom_point(col="purple")+
theme_minimal()
library(PerformanceAnalytics)
chart.Correlation(dataset, histogram=TRUE)
#entrenamiento del modelo: encontramos los parámetros de nuestro modelo.
model1<-dataset %>%
lm(formula = Sales ~ TV)
model1$coefficients
dataset %>%
ggplot(aes(x=TV, y=Sales)) +
geom_point(col="blue")+
geom_abline(intercept = model1$coefficients[1],
slope = model1$coefficients[2], col='red', lwd=1)+
theme_minimal()
X1<-dataset$TV[1]
X1
y_est1<-predict(object = model1, newdata = data.frame(TV=X1))
y_est1
error1<-dataset$Sales[1] - y_est1
error1
sum(model1$residuals)
summary(model1)
#R^2 - Coeficiente de Determinación
summary_m1<-summary(model1)
sqrt(summary_m1$r.squared)
model2<-dataset %>%
lm(formula = Sales ~ Newspaper)
summary(model2)
# Sales ~ Radio
model3<-dataset %>%
lm(formula = Sales ~ Radio)
summary(model3)
# Sales ~ Radio + Newspaper
model4<-dataset %>%
lm(formula = Sales ~ Radio + Newspaper)
summary(model4)
# Sales ~ TV + Newspaper
model5<-dataset %>%
lm(formula = Sales ~ TV + Newspaper)
summary(model5)
# Sales ~ TV + Radio
model6<-dataset %>%
lm(formula = Sales ~ TV + Radio)
summary(model6)
# Sales ~ TV + Radio + Newspaper
# Notar que la notación "y ~ ." hacer referencia a un modelo con todas las variables
# predictoras diposnibles en la tabla, usar en caso de tener muchas columnas.
model7<-dataset %>%
lm(formula = Sales ~ .)
summary(model7)
library(caret)
library(dplyr)
index<-createDataPartition(dataset$Sales, p=0.7, list=FALSE)
dataTrain<-dataset[index, ]
dataTest<-dataset[-index, ]
model1<-dataTrain %>%
lm(formula = Sales ~ TV)
summary(model1)
predict1<-predict(object = model1, newdata = dataTest)
rmse1<-sqrt(mean((predict1 - dataTest$Sales)^2))
rmse1
library(dplyr)
library(ggplot2)
library(caret)
dataset<-read.csv("Advertising.csv")
dataset<-dataset %>%
select(-X)
head(dataset)
index<-createDataPartition(dataset$Sales, p=0.8, list=FALSE)
dataTrain<-dataset[index, ]
dataTest<-dataset[-index, ]
lm1<-dataTrain %>%
lm(formula = Sales ~ .)
#summary(lm1)
predicts_lm1<-predict(object=lm1, newdata=dataTest)
#predicts_lm1
rmse1<-sqrt(mean((predicts_lm1 - dataTest$Sales)^2))
rmse1
xaxis<-seq(min(dataTest$Sales), max(dataTest$Sales))
identity<-data.frame(x=xaxis, y=xaxis)
data.frame(obs=dataTest$Sales, preds=predicts_lm1) %>%
ggplot(aes(x=preds, y=obs))+
geom_point(col="blue", size=3)+
geom_line(data=identity, aes(x=x, y=y), col='red', lwd=1)+
theme_minimal()
data_comparation<-data.frame(obs=dataTest$Sales, preds=predicts_lm1)
dataTest %>%
ggplot(aes(x=Sales, y=after_stat(density)))+
geom_density(col="blue", lwd=1, fill="blue", alpha=0.3)+
geom_density(data=data_comparation,
aes(x=preds, y=after_stat(density)), col="red", lwd=1, fill="red", alpha=0.3)+
theme_minimal()
# trControl para configuración de KFolds
kfoldsDriver<-trainControl(method='repeatedcv',
number=10,
repeats=10,
verboseIter = TRUE)
lm1<-train(form = Sales ~ TV,
data=dataTrain,
method='lm',
trControl=kfoldsDriver)
summary(lm1)
lm1$resample
lm1$results
lm2<-train(form = Sales ~ TV + Radio,
data=dataTrain,
method='lm',
trControl=kfoldsDriver)
lm2$results
preds_champion<-predict(object = lm2, newdata = dataTest)
rmse_registro<-sqrt(mean((preds_champion - dataTest$Sales)^2))
rmse_registro
champ_model<-dataset %>%
lm(formula = Sales ~ TV + Radio)
champ_model
cor_matrix <- cor(datos_limpios, use="complete.obs")
cor_matrix <- cor(datos_limpios, use="complete.obs")
corrplot(cor_matrix, method="circle")
library(corrplot)
cor_matrix <- cor(datos_limpios, use="complete.obs")
corrplot(cor_matrix, method="circle")
# Ajustar un modelo de regresión lineal
modelo_lm <- lm(y ~ x1 + x2 + ..., data = datos)
# Ajustar un modelo de regresión lineal
modelo_lm <- lm(y ~ x1 + x2 + ..., data = datos_limpios)
# Ajustar un modelo de regresión lineal
modelo_lm <- lm(datos_limpios$median_house_value ~ x1 + x2 + ..., data = datos_limpios)
# Ajustar un modelo de regresión lineal
modelo_lm <- lm(datos_limpios$median_house_value ~ datos_limpios$median_income + datos_limpios$latitude, data = datos_limpios)
# Realizar predicciones
predicciones <- predict(modelo_lm, newdata = nuevos_datos)
# Ajustar un modelo de regresión lineal
modelo_lm <- lm(datos_limpios$median_house_value ~ datos_limpios$median_income + datos_limpios$latitude, data = datos_limpios)
# Realizar predicciones
predicciones <- predict(modelo_lm, newdata = testData)
# Ajustar un modelo de regresión lineal
modelo_lm <- lm(datos_limpios$median_house_value ~ datos_limpios$median_income + datos_limpios$latitude, data = datos_limpios)
summary(modelo_lm)
# Ajustar un modelo de regresión lineal
modelo_lm <- lm(datos_limpios$median_house_value ~ datos_limpios$median_income + datos_limpios$latitude + datos_limpios$total_rooms + datos_limpios$housing_median_age, data = datos_limpios)
summary(modelo_lm)
# Ajustar un modelo de regresión lineal
modelo_lm <- lm(datos_limpios$median_house_value ~ datos_limpios$median_income, data = datos_limpios)
summary(modelo_lm)
# Ajustar un modelo de regresión lineal
modelo_lm <- lm(datos_limpios$median_house_value ~ datos_limpios$median_income + datos_limpios$latitude, data = datos_limpios)
summary(modelo_lm)
# Ajustar un modelo de regresión lineal
modelo_lm <- lm(datos_limpios$median_house_value ~ datos_limpios$median_income + datos_limpios$latitude , data = datos_limpios)
summary(modelo_lm)
# Ajustar un modelo de regresión lineal
modelo_lm <- lm(datos_limpios$median_house_value ~ datos_limpios$median_income + datos_limpios$latitude + datos_limpios$total_rooms, data = datos_limpios)
summary(modelo_lm)
# Ajustar un modelo de regresión lineal
modelo_lm <- lm(datos_limpios$median_house_value ~ datos_limpios$median_income + datos_limpios$latitude + datos_limpios$total_rooms + datos_limpios$housing_median_age, data = datos_limpios)
summary(modelo_lm)
# Ajustar un modelo de regresión lineal
modelo_lm <- lm(datos_limpios$median_house_value ~ datos_limpios$median_income + datos_limpios$latitude + datos_limpios$total_rooms + datos_limpios$housing_median_age, data = datos_limpios)
summary(modelo_lm)
# Ajustar el modelo de regresión polinómica de grado 2 con múltiples variables independientes
modelo_poly <- lm(y ~ poly(x1, 2, raw=TRUE) + poly(x2, 2, raw=TRUE) + poly(x3, 2, raw=TRUE), data = datos)
# Ajustar el modelo de regresión polinómica de grado 2 con múltiples variables independientes
modelo_poly <- lm(y ~ poly(x1, 2, raw=TRUE) + poly(x2, 2, raw=TRUE) + poly(x3, 2, raw=TRUE), data = datos_limpios)
# Ajustar el modelo de regresión polinómica de grado 2 con múltiples variables independientes
modelo_poly <- lm(y ~ poly(datos_limpios$median_income, 2, raw=TRUE) + poly(datos_limpios$latitude, 2, raw=TRUE) + poly(datos_limpios$total_rooms, 2, raw=TRUE), data = datos_limpios)
# Ajustar el modelo de regresión polinómica de grado 2 con múltiples variables independientes
modelo_poly <- lm(datos_limpios$median_house_value ~ poly(datos_limpios$median_income, 2, raw=TRUE) + poly(datos_limpios$latitude, 2, raw=TRUE) + poly(datos_limpios$total_rooms, 2, raw=TRUE), data = datos_limpios)
summary(modelo_poly)
# Ajustar el modelo de regresión polinómica de grado 2 con múltiples variables independientes
modelo_poly <- lm(datos_limpios$median_house_value ~ poly(datos_limpios$median_income, 3, raw=TRUE) + poly(datos_limpios$latitude, 2, raw=TRUE) + poly(datos_limpios$total_rooms, 2, raw=TRUE), data = datos_limpios)
summary(modelo_poly)
# Ajustar el modelo de regresión polinómica de grado 2 con múltiples variables independientes
modelo_poly <- lm(datos_limpios$median_house_value ~ poly(datos_limpios$median_income, 12, raw=TRUE) + poly(datos_limpios$latitude, 2, raw=TRUE) + poly(datos_limpios$total_rooms, 2, raw=TRUE), data = datos_limpios)
summary(modelo_poly)
# Ajustar el modelo de regresión polinómica de grado 2 con múltiples variables independientes
modelo_poly <- lm(datos_limpios$median_house_value ~ poly(datos_limpios$median_income, 9, raw=TRUE) + poly(datos_limpios$latitude, 5, raw=TRUE) + poly(datos_limpios$total_rooms, 2, raw=TRUE), data = datos_limpios)
summary(modelo_poly)
# Ajustar el modelo de regresión polinómica de grado 2 con múltiples variables independientes
modelo_poly <- lm(datos_limpios$median_house_value ~ poly(datos_limpios$median_income, 20, raw=TRUE) + poly(datos_limpios$latitude, 5, raw=TRUE) + poly(datos_limpios$total_rooms, 2, raw=TRUE), data = datos_limpios)
summary(modelo_poly)
# Ajustar el modelo de regresión polinómica de grado 2 con múltiples variables independientes
modelo_poly <- lm(datos_limpios$median_house_value ~ poly(datos_limpios$median_income, 5, raw=TRUE) + poly(datos_limpios$latitude, 5, raw=TRUE) + poly(datos_limpios$total_rooms, 2, raw=TRUE), data = datos_limpios)
summary(modelo_poly)
# Ajustar el modelo de regresión polinómica de grado 2 con múltiples variables independientes
modelo_poly <- lm(datos_limpios$median_house_value ~ poly(datos_limpios$median_income, 2, raw=TRUE) + poly(datos_limpios$latitude, 2, raw=TRUE) + poly(datos_limpios$total_rooms, 2, raw=TRUE), data = datos_limpios)
summary(modelo_poly)
# Ajustar el modelo de regresión polinómica de grado 2 con múltiples variables independientes
modelo_poly <- lm(datos_limpios$median_house_value ~ poly(datos_limpios$median_income, 3, raw=TRUE) + poly(datos_limpios$latitude, 2, raw=TRUE) + poly(datos_limpios$total_rooms, 2, raw=TRUE), data = datos_limpios)
summary(modelo_poly)
# Ajustar el modelo de regresión polinómica de grado 2 con múltiples variables independientes
modelo_poly <- lm(datos_limpios$median_house_value ~ poly(datos_limpios$median_income, 3, raw=TRUE) + poly(datos_limpios$latitude, 3, raw=TRUE) + poly(datos_limpios$total_rooms, 2, raw=TRUE), data = datos_limpios)
summary(modelo_poly)
# Ajustar el modelo de regresión polinómica de grado 2 con múltiples variables independientes
modelo_poly <- lm(datos_limpios$median_house_value ~ poly(datos_limpios$median_income, 3, raw=TRUE) + poly(datos_limpios$latitude, 3, raw=TRUE) + poly(datos_limpios$total_rooms, 3, raw=TRUE), data = datos_limpios)
summary(modelo_poly)
# Ajustar el modelo de regresión polinómica de grado 2 con múltiples variables independientes
grado <- 4
modelo_poly <- lm(datos_limpios$median_house_value ~ poly(datos_limpios$median_income, grado, raw=TRUE) + poly(datos_limpios$latitude, grado, raw=TRUE) + poly(datos_limpios$total_rooms, grado, raw=TRUE), data = datos_limpios)
summary(modelo_poly)
# Ajustar el modelo de regresión polinómica de grado 2 con múltiples variables independientes
grado <- 6
modelo_poly <- lm(datos_limpios$median_house_value ~ poly(datos_limpios$median_income, grado, raw=TRUE) + poly(datos_limpios$latitude, grado, raw=TRUE) + poly(datos_limpios$total_rooms, grado, raw=TRUE), data = datos_limpios)
summary(modelo_poly)
# Ajustar el modelo de regresión polinómica de grado 2 con múltiples variables independientes
grado <- 9
modelo_poly <- lm(datos_limpios$median_house_value ~ poly(datos_limpios$median_income, grado, raw=TRUE) + poly(datos_limpios$latitude, grado, raw=TRUE) + poly(datos_limpios$total_rooms, grado, raw=TRUE), data = datos_limpios)
summary(modelo_poly)
# Ajustar el modelo de regresión polinómica de grado 2 con múltiples variables independientes
grado <- 2
modelo_poly <- lm(datos_limpios$median_house_value ~ poly(datos_limpios$median_income, grado, raw=TRUE) + poly(datos_limpios$latitude, grado, raw=TRUE) + poly(datos_limpios$total_rooms, grado, raw=TRUE), data = datos_limpios)
summary(modelo_poly)
# Ajustar el modelo de regresión polinómica de grado 2 con múltiples variables independientes
grado <- 2
modelo_poly <- lm(datos_limpios$median_house_value ~ poly(datos_limpios$median_income, grado, raw=TRUE) + poly(datos_limpios$latitude, grado, raw=TRUE), data = datos_limpios)
summary(modelo_poly)
# Ajustar el modelo de regresión polinómica de grado 2 con múltiples variables independientes
grado <- 10
modelo_poly <- lm(datos_limpios$median_house_value ~ poly(datos_limpios$median_income, grado, raw=TRUE) + poly(datos_limpios$latitude, grado, raw=TRUE), data = datos_limpios)
summary(modelo_poly)
# Ajustar el modelo de regresión polinómica de grado 2 con múltiples variables independientes
grado <- 15
modelo_poly <- lm(datos_limpios$median_house_value ~ poly(datos_limpios$median_income, grado, raw=TRUE) + poly(datos_limpios$latitude, grado, raw=TRUE), data = datos_limpios)
summary(modelo_poly)
# Ajustar el modelo de regresión polinómica de grado 2 con múltiples variables independientes
grado <- 30
modelo_poly <- lm(datos_limpios$median_house_value ~ poly(datos_limpios$median_income, grado, raw=TRUE) + poly(datos_limpios$latitude, grado, raw=TRUE), data = datos_limpios)
summary(modelo_poly)
# Ajustar el modelo de regresión polinómica de grado 2 con múltiples variables independientes
grado <- 3
modelo_poly <- lm(datos_limpios$median_house_value ~ poly(datos_limpios$median_income, grado, raw=TRUE) + poly(datos_limpios$latitude, grado, raw=TRUE), data = datos_limpios)
summary(modelo_poly)
# Ajustar el modelo de regresión polinómica de grado 2 con múltiples variables independientes
grado <- 2
modelo_poly <- lm(datos_limpios$median_house_value ~ poly(datos_limpios$median_income, grado, raw=TRUE) + poly(datos_limpios$latitude, grado, raw=TRUE), data = datos_limpios)
summary(modelo_poly)
# Ajustar un modelo de regresión lineal
modelo_lm <- lm(datos_limpios$median_house_value ~ datos_limpios$median_income + datos_limpios$latitude, data = datos_limpios)
summary(modelo_lm)
# Graficar el modelo de regresión
plot(datos_limpios$median_income, datos_limpios$median_house_value,
xlab = "Median Income", ylab = "Median House Value", main = "Regression Model")
abline(modelo_lm, col = "blue")
# Añadir puntos de latitud con colores diferentes
points(datos_limpios$median_income, datos_limpios$median_house_value,
col = adjustcolor("red", alpha.f = 0.5))
legend("topright", legend = c("Regresión", "Latitud"),
col = c("blue", adjustcolor("red", alpha.f = 0.5)), lty = 1:1, cex = 0.8)
income_seq <- seq(min(datos_limpios$median_income), max(datos_limpios$median_income), length.out = 20)
latitude_seq <- seq(min(datos_limpios$latitude), max(datos_limpios$latitude), length.out = 20)
grid <- expand.grid(median_income = income_seq, latitude = latitude_seq)
# Predecir los valores de median_house_value usando el modelo
predicted_values <- predict(modelo_poly, newdata = grid)
# Graficar la superficie polinómica
library(plotly)  # Para gráficos interactivos, si lo prefieres
install.packages("plotly")
income_seq <- seq(min(datos_limpios$median_income), max(datos_limpios$median_income), length.out = 20)
latitude_seq <- seq(min(datos_limpios$latitude), max(datos_limpios$latitude), length.out = 20)
grid <- expand.grid(median_income = income_seq, latitude = latitude_seq)
# Predecir los valores de median_house_value usando el modelo
predicted_values <- predict(modelo_poly, newdata = grid)
# Graficar la superficie polinómica
library(plotly)  # Para gráficos interactivos, si lo prefieres
plot_ly(x = grid$median_income, y = grid$latitude, z = matrix(predicted_values, nrow = length(income_seq)),
type = "surface", colorscale = "Viridis", showscale = FALSE) %>%
add_surface() %>%
layout(scene = list(xaxis = list(title = "Median Income"),
yaxis = list(title = "Latitude"),
zaxis = list(title = "Median House Value")))
# Ajustar un modelo de regresión lineal
modelo_lm <- lm(datos_limpios$median_house_value ~ datos_limpios$median_income + datos_limpios$latitude + datos_limpios$households + datos_limpios$total_bedrooms + datos_limpios$longitude, data = datos_limpios)
summary(modelo_lm)
# Ajustar un modelo de regresión lineal
modelo_lm <- lm(datos_limpios$median_house_value ~ datos_limpios$median_income + datos_limpios$latitude, data = datos_limpios)
summary(modelo_lm)
# Ajustar un modelo de regresión lineal
modelo_lm <- lm(datos_limpios$median_house_value ~ datos_limpios$median_income + datos_limpios$latitude, data = datos_limpios)
summary(modelo_lm)
# Ajustar un modelo de regresión lineal
modelo_lm <- lm(datos_limpios$median_house_value ~ datos_limpios$median_income, data = datos_limpios)
summary(modelo_lm)
# Ajustar un modelo de regresión lineal
modelo_lm <- lm(datos_limpios$median_house_value ~ datos_limpios$median_income, data = datos_limpios)
summary(modelo_lm)
# Ajustar un modelo de regresión lineal
modelo_lm <- lm(datos_limpios$median_house_value ~ datos_limpios$median_income, data = datos_limpios)
summary(modelo_lm)
# Graficar el modelo de regresión
plot(datos_limpios$median_income, datos_limpios$median_house_value,
xlab = "Median Income", ylab = "Median House Value", main = "Regression Model")
abline(modelo_lm, col = "blue")
# Añadir puntos de latitud con colores diferentes
points(datos_limpios$median_income, datos_limpios$median_house_value,
col = adjustcolor("red", alpha.f = 0.5))
legend("topright", legend = c("Regresión", "Latitud"),
col = c("blue", adjustcolor("red", alpha.f = 0.5)), lty = 1:1, cex = 0.8)
# Ajustar el modelo de regresión polinómica de grado 2 con múltiples variables independientes
grado <- 2
modelo_poly <- lm(datos_limpios$median_house_value ~ poly(datos_limpios$median_income, grado, raw=TRUE), data = datos_limpios)
summary(modelo_poly)
# Ajustar el modelo de regresión polinómica de grado 2 con múltiples variables independientes
grado <- 8
modelo_poly <- lm(datos_limpios$median_house_value ~ poly(datos_limpios$median_income, grado, raw=TRUE), data = datos_limpios)
summary(modelo_poly)
# Ajustar el modelo de regresión polinómica de grado 2 con múltiples variables independientes
grado <- 5
modelo_poly <- lm(datos_limpios$median_house_value ~ poly(datos_limpios$median_income, grado, raw=TRUE), data = datos_limpios)
summary(modelo_poly)
# Ajustar el modelo de regresión polinómica de grado 2 con múltiples variables independientes
grado <- 2
modelo_poly <- lm(datos_limpios$median_house_value ~ poly(datos_limpios$median_income, grado, raw=TRUE), data = datos_limpios)
summary(modelo_poly)
# Ajustar el modelo de regresión polinómica de grado 2 con múltiples variables independientes
grado <- 3
modelo_poly <- lm(datos_limpios$median_house_value ~ poly(datos_limpios$median_income, grado, raw=TRUE), data = datos_limpios)
summary(modelo_poly)
# Ajustar el modelo de regresión polinómica de grado 2 con múltiples variables independientes
grado <- 4
modelo_poly <- lm(datos_limpios$median_house_value ~ poly(datos_limpios$median_income, grado, raw=TRUE), data = datos_limpios)
summary(modelo_poly)
# Ajustar el modelo de regresión polinómica de grado 2 con múltiples variables independientes
grado <- 2
modelo_poly <- lm(datos_limpios$median_house_value ~ poly(datos_limpios$median_income, grado, raw=TRUE), data = datos_limpios)
summary(modelo_poly)
# Instalar y cargar el paquete glmnet si no está instalado
# install.packages("glmnet")
library(glmnet)
# Convertir el dataframe a matriz para glmnet
X <- as.matrix(datos_limpios[, -which(names(datos_limpios) == "median_house_value")])
Y <- datos_limpios$median_house_value
# Ajustar el modelo de regresión ridge con validación cruzada
modelo_ridge <- cv.glmnet(X, Y, alpha = 0)
# Ver los resultados del modelo
print(modelo_ridge)
# Graficar los coeficientes del modelo
plot(modelo_ridge)
# Instalar y cargar el paquete glmnet si no está instalado
# install.packages("glmnet")
library(glmnet)
# Convertir el dataframe a matriz para glmnet
X <- as.matrix(datos_limpios[, -which(names(datos_limpios) == "median_house_value")])
Y <- datos_limpios$median_house_value
# Ajustar el modelo de regresión ridge con validación cruzada
modelo_ridge <- cv.glmnet(X, Y, alpha = 0)
# Ver los resultados del modelo
summary(modelo_ridge)
# Graficar los coeficientes del modelo
plot(modelo_ridge)
# Realizar predicciones
predicciones <- predict(modelo_lm, newdata = testData)
predicciones
utils.submission(predicciones)
utils.submission = function (data) {
submissionFrame <- data.frame(
"id" = data$id,
"median_house_value" = data$id
)
write.csv(submissionFrame, submissionFilePath, row.names = FALSE)
}
utils.submission(predicciones)
resultados -> data.frame(ID= testData$id, median_house_value= predicciones)
resultados <- data.frame(ID= testData$id, median_house_value= predicciones)
# Realizar predicciones
testDataA <- testData[, c("median_income", "latitude")]  # Ajusta según las variables usadas en modelo_lm
predicciones <- predict(modelo_lm, newdata = testDataA)
predicciones
datos_limpios <- trainData %>% na.omit()
testData <- testData %>% na.omit()
datos_limpios
# Realizar predicciones
testDataA <- testData[, c("median_income", "latitude")]  # Ajusta según las variables usadas en modelo_lm
predicciones <- predict(modelo_lm, newdata = testDataA)
predicciones
filas_Train <- nrows(trainData)
filas_Train <- nrow(trainData)
filas_Train <- nrow(trainData)
filas_Train
filas_Test <- nrow(testData)
filas_Test <- nrow(testData)
filas_Test
# Realizar predicciones
testDataA <- testData[, c("median_income", "latitude")]  # Ajusta según las variables usadas en modelo_lm
predicciones <- predict(modelo_lm, newdata = testDataA)
predicciones
testData <- testData %>%
mutate(ocean_proximity = case_when(
ocean_proximity == "<1H OCEAN" ~ 1,
ocean_proximity == "INLAND" ~ 2,
ocean_proximity == "NEAR BAY" ~ 3,
ocean_proximity == "NEAR OCEAN" ~ 4,
ocean_proximity == "ISLAND" ~ 5,
TRUE ~ NA_real_
))
print(trainData)
datos_limpios <- trainData %>% na.omit()
testData <- testData %>% na.omit()
datos_limpios
filas_Train <- nrow(trainData)
filas_Train
filas_Test <- nrow(testData)
filas_Test
# Ajustar un modelo de regresión lineal
modelo_lm <- lm(datos_limpios$median_house_value ~ datos_limpios$median_income, data = datos_limpios)
summary(modelo_lm)
# Realizar predicciones
testDataA <- testData[, c("median_income", "latitude")]  # Ajusta según las variables usadas en modelo_lm
predicciones <- predict(modelo_lm, newdata = testDataA)
predicciones
# Realizar predicciones
testDataA <- testData[, c("median_income")]  # Ajusta según las variables usadas en modelo_lm
predicciones <- predict(modelo_lm, newdata = testDataA)
# Realizar predicciones
testDataA <- testData[, c("median_income")]  # Ajusta según las variables usadas en modelo_lm
predicciones <- predict(modelo_lm, newdata = testDataA)
# Ajustar un modelo de regresión lineal
modelo_lm <- lm(datos_limpios$median_house_value ~ datos_limpios$median_income, data = datos_limpios)
summary(modelo_lm)
# Realizar predicciones
testDataA <- testData[, c("median_income")]  # Ajusta según las variables usadas en modelo_lm
predicciones <- predict(modelo_lm, newdata = testDataA)
# Realizar predicciones
testDataA <- testData[, c("median_income")]  # Ajusta según las variables usadas en modelo_lm
predicciones <- predict(modelo_lm, newdata = testData)
predicciones
# Graficar el modelo de regresión
plot(datos_limpios$median_income, datos_limpios$median_house_value,
xlab = "Median Income", ylab = "Median House Value", main = "Regression Model")
abline(modelo_lm, col = "blue")
# Añadir puntos de latitud con colores diferentes
points(datos_limpios$median_income, datos_limpios$median_house_value,
col = adjustcolor("red", alpha.f = 0.5))
legend("topright", legend = c("Regresión", "Latitud"),
col = c("blue", adjustcolor("red", alpha.f = 0.5)), lty = 1:1, cex = 0.8)
resultados <- data.frame(ID= testData$id, median_house_value= predicciones)
# Ejemplo de escalamiento Min-Max
min_max_scaled <- function(x) {
(x - min(x)) / (max(x) - min(x))
}
# Aplicar escalamiento a un dataset
dataset_scaled <- as.data.frame(lapply(datos_limpios, min_max_scaled))
dataset_scaled
# Ajustar un modelo de regresión lineal
modelo_lm <- lm(datos_limpios$median_house_value ~ datos_limpios$median_income, data = dataset_scaled)
summary(modelo_lm)
# Graficar el modelo de regresión
plot(datos_limpios$median_income, datos_limpios$median_house_value,
xlab = "Median Income", ylab = "Median House Value", main = "Regression Model")
abline(modelo_lm, col = "blue")
# Añadir puntos de latitud con colores diferentes
points(datos_limpios$median_income, datos_limpios$median_house_value,
col = adjustcolor("red", alpha.f = 0.5))
legend("topright", legend = c("Regresión", "Latitud"),
col = c("blue", adjustcolor("red", alpha.f = 0.5)), lty = 1:1, cex = 0.8)
# Ajustar el modelo de regresión polinómica de grado 2 con múltiples variables independientes
grado <- 2
modelo_poly <- lm(datos_limpios$median_house_value ~ poly(datos_limpios$median_income, grado, raw=TRUE), data = datos_limpios)
summary(modelo_poly)
# Ajustar un modelo de regresión lineal
modelo_lm <- lm(datos_limpios$median_house_value ~ datos_limpios$median_income, data = dataset_standardized)
# Ejemplo de escalamiento Min-Max
# Ejemplo de estandarización
standardized <- function(x) {
(x - mean(x)) / sd(x)
}
# Aplicar estandarización a un dataset
dataset_standardized <- as.data.frame(lapply(dataset, standardized))
library(corrplot)
cor_matrix <- cor(datos_limpios, use="complete.obs")
corrplot(cor_matrix, method="circle")
# Ajustar un modelo de regresión lineal
modelo_lm <- lm(datos_limpios$median_house_value ~ datos_limpios$median_income, data = dataset_standardized)
summary(modelo_lm)
# Realizar predicciones
testDataA <- testData[, c("median_income")]  # Ajusta según las variables usadas en modelo_lm
predicciones <- predict(modelo_lm, newdata = testData)
predicciones
# Ajustar un modelo de regresión lineal
modelo_lm <- lm(datos_limpios$median_house_value ~ datos_limpios$median_income, data = dataset_standardized)
summary(modelo_lm)
# Realizar predicciones
testDataA <- testData[, c("median_income")]  # Ajusta según las variables usadas en modelo_lm
predicciones <- predict(modelo_lm, newdata = testData)
predicciones
# Ajustar un modelo de regresión lineal
X <- datos_limpios$median_income
Y <- datos_limpios$median_house_value
modelo_lm <- lm( Y ~ X, data = dataset_standardized)
summary(modelo_lm)
# Realizar predicciones
testDataA <- testData[, c("median_income")]  # Ajusta según las variables usadas en modelo_lm
predicciones <- predict(modelo_lm, newdata = testData)
predicciones
# Realizar predicciones
testDataA <- testData[, c("median_income")]  # Ajusta según las variables usadas en modelo_lm
predicciones <- predict(modelo_lm, newdata = testDataA)
# Realizar predicciones
testDataA <- testData[, c("median_income")]  # Ajusta según las variables usadas en modelo_lm
testDataA <- as.data.frame(testDataA)
predicciones <- predict(modelo_lm, newdata = testDataA)
predicciones
# Realizar predicciones
testDataA <- testData[, c("median_income")]  # Ajusta según las variables usadas en modelo_lm
predicciones <- predict(modelo_lm, newdata = testData)
predicciones
# Realizar predicciones
predicciones <- predict(modelo_lm, newdata = testData)
predicciones
